#!/usr/bin/bash
# This script should be run as root on a clean Ubuntu 22.04

if [ $0 == '-bash' ]; then
    echo Error: Run this script as "bash setup.sh" not "source setup.sh".  Run as root, e.g., "sudo bash setup.sh"
    return 1
fi
set -ex
SCRIPT_DIR="$( dirname -- "${BASH_SOURCE[0]}"; )"
SCRIPT_DIR=$(realpath $SCRIPT_DIR)
source $SCRIPT_DIR/setup.env

if [ $UID -eq 0 ]; then
    # Running as root (first time)
    useradd --create-home --shell /usr/bin/bash --password $(openssl passwd -1 $DJANGO_USER_PASSWORD) $DJANGO_USER
    usermod --append --groups sudo $DJANGO_USER
    ufw allow OpenSSH
    ufw --force enable
    # Re-invoke this same script as $DJANGO_USER
    exec su $DJANGO_USER "$0" -- "$@"
    # nothing will be executed from root beyond that line,
    # because exec replaces running process with the new one
fi

if [ $USER != $DJANGO_USER ]; then
    echo Error: Run as root, e.g., "sudo bash setup.sh"
    exit 2
fi

# Django
cd ~; mkdir django; cd django; mkdir venv; cd venv
echo $DJANGO_USER_PASSWORD | sudo --stdin apt install -y python3.12-venv python3-pip
python3 -m venv django
source django/bin/activate
echo source ~/django/venv/django/bin/activate >> ~/.bashrc
cd ~/django
git clone $GIT_URL
cd $APP_NAME
#pip install -r requirements/local.txt
pip install -r $REQUIREMENTS_FILE

# PostGres
POSTGRES_VERSION=17
sudo apt install -y postgresql
sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y
sudo apt update
sudo apt install -y postgresql-$POSTGRES_VERSION
sudo -u postgres psql -c "CREATE DATABASE $APP_NAME;"
sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PASSWORD';"
# Use password authentication
sudo sed --in-place=bak 's/^local\(.*\)all\(.*\)all\(.*\)peer/local\1all\2all\3md5/' /etc/postgresql/$POSTGRES_VERSION/main/pg_hba.conf
sudo sed --in-place=bak 's/^local\(.*\)all\(.*\)postgres\(.*\)peer/local\1all\2postgres\3md5/' /etc/postgresql/$POSTGRES_VERSION/main/pg_hba.conf
sudo service postgresql restart
# To run psql in the future: psql --username postgres --host=localhost --dbname $APP_NAME

# Prep Django
mkdir env
cp $SCRIPT_DIR/local.env $SCRIPT_DIR/production.env env/
for envfile in env/*.env; do
    echo # Generated by setup.sh
    if [[ $ALT_SERVER_NAME ]]; then
        echo DJANGO_ALLOWED_HOSTS=$SERVER_NAME,$ALT_SERVER_NAME >> $envfile
    else
        echo DJANGO_ALLOWED_HOSTS=$SERVER_NAME >> $envfile
    fi
    echo DATABASE_URL=postgres://postgres:$POSTGRES_PASSWORD@localhost:5432/$APP_NAME >> $envfile
done 
cp $SCRIPT_DIR/setup.env $SCRIPT_DIR/startservers.sh env/
python manage.py migrate
export DJANGO_SUPERUSER_PASSWORD
python manage.py createsuperuser --noinput --username admin --email $DJANGO_SUPERUSER_EMAIL
python manage.py collectstatic
# Give nginx access to static dir
sudo chown    :www-data ~ ~/django ~/django/$APP_NAME
sudo chown -R :www-data ~/django/$APP_NAME/$STATIC_ROOT_RELATIVE

# gunicorn
pip3 install gunicorn

# nginx
sudo apt install -y nginx
sudo ufw allow 'Nginx Full'
# Create conf file
export DJANGO_USER SERVER_NAME ALT_SERVER_NAME APP_NAME 
envsubst '$DJANGO_USER,$SERVER_NAME,$ALT_SERVER_NAME,$APP_NAME' < $SCRIPT_DIR/example.com | sudo tee /etc/nginx/sites-available/$APP_NAME.com
sudo rm -f /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
sudo ln -s /etc/nginx/sites-available/* /etc/nginx/sites-enabled/
# Create a self-signed certificate
openssl req -x509 -nodes -days 3650 -newkey ec:<(openssl ecparam -name prime256v1) -keyout /home/$DJANGO_USER/django/$APP_NAME/env/private_key.pem -out /home/$DJANGO_USER/django/$APP_NAME/env/certificate.pem -subj "/C=US/ST=New Mexico/O=$APP_NAME"
if [[ $SERVER_NAME =~ ^[a-zA-Z] ]]; then
    # Install certbot
    sudo snap install core; sudo snap refresh core
    sudo snap install --classic certbot
    sudo ln -s /snap/bin/certbot /usr/bin/certbot 
    sudo systemctl start nginx
    if [[ $CERTBOT_EMAIL_ADDR ]]; then
        CERTBOT_EMAIL="-m $CERTBOT_EMAIL_ADDR"
    else
        CERTBOT_EMAIL=--register-unsafely-without-email
    fi
    # Get a real certificate from LetsEncrypt and modify sites-available/$APP_NAME.com conf file
    sudo certbot --nginx $CERTBOT_EMAIL --agree-tos --no-eff-email -d $SERVER_NAME -d $ALT_SERVER_NAME
    sudo systemctl stop nginx
fi

# Epilog
set -ex
echo Success! Run \'bash $SCRIPT_DIR/startservers.sh\' to serve the web site.
# This must be the last line
sudo su --login $DJANGO_USER
 
